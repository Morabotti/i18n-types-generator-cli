// THIS FILE IS AUTOMATICALLY GENERATED BY (i18-types-generator-cli)
// MADE BY https://github.com/Morabotti

export enum Language {
  En = 'en',
  Fi = 'fi'
}

export enum Namespace {
  Group = 'group',
  Test = 'test'
}

export type GroupKeys = 'test_dashboard' | 'omage' | 'alpha' | 'beta' | 'nested.nested_value' | 'nested.nested.nested_value';
export type TestKeys = 'first' | 'second' | 'third' | 'nested.fourth' | 'nested.nested.fifth';

interface Map {
  [Namespace.Group]: GroupKeys;
  [Namespace.Test]: TestKeys;
}

type PickMap<X extends Namespace> = Map[X];
type PickMultiple<X extends Namespace[]> = X extends { length: 1 } ? Map[X[0]]
  : X extends { length: 2 } ? Map[X[0]] | Map[X[1]]
  : X extends { length: 3 } ? Map[X[0]] | Map[X[1]] | Map[X[2]]
  : X extends { length: 4 } ? Map[X[0]] | Map[X[1]] | Map[X[2]] | Map[X[3]]
  : X extends { length: 5 } ? Map[X[0]] | Map[X[1]] | Map[X[2]] | Map[X[3]] | Map[X[4]]
  : X extends { length: 6 } ? Map[X[0]] | Map[X[1]] | Map[X[2]] | Map[X[3]] | Map[X[4]] | Map[X[5]]
  : Map[X[0]] | Map[X[1]] | Map[X[2]] | Map[X[3]] | Map[X[4]] | Map[X[5]] | Map[X[6]];

export type TranslationMapping<X extends Namespace> = PickMap<X>;
export type TranslationsMapping<X extends Namespace[]> = PickMultiple<X>;
